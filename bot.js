const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

// üî• Thay token bot Telegram c·ªßa m√†y v√†o ƒë√¢y
const TOKEN = '7578384719:AAE7BWfKE5BQzQ1ExjFyHJ1zqespNccn-Jc';

// üî• URL app c·ªßa Koyeb (THAY B·∫∞NG URL TH·∫¨T C·ª¶A M√ÄY)
const WEBHOOK_URL = 'https://passing-shantee-phancongtri-7ef1cd3b.koyeb.app';

// T·∫°o bot v·ªõi webhook
const bot = new TelegramBot(TOKEN);
const app = express();
const PORT = process.env.PORT || 8000;

// X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Telegram
app.use(express.json());
app.post(`/bot${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// ƒê·∫∑t webhook ƒë·ªÉ bot nh·∫≠n tin nh·∫Øn
bot.setWebHook(`${WEBHOOK_URL}/bot${TOKEN}`);

app.listen(PORT, () => {
    console.log(`‚úÖ Server ƒëang ch·∫°y tr√™n port ${PORT}`);
});

const reminders = {}; // L∆∞u nh·∫Øc nh·ªü theo chatId

// üìå Khi b·∫•m /start => Ch·ªâ hi·ªÉn th·ªã tin nh·∫Øn, KH√îNG C√íN MENU
bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi bot nh·∫Øc nh·ªü! H√£y s·ª≠ d·ª•ng c√°c l·ªánh sau:\n\n" +
        "/add [n·ªôi dung] [HH:MM] [ng√†y] - Th√™m nh·∫Øc nh·ªü m·ªôt l·∫ßn\n" +
        "/reply [n·ªôi dung] [ng√†y] - L·∫∑p l·∫°i nh·∫Øc nh·ªü h√†ng th√°ng\n" +
        "/all - Hi·ªÉn th·ªã t·∫•t c·∫£ nh·∫Øc nh·ªü\n" +
        "/remove [s·ªë th·ª© t·ª±] - X√≥a nh·∫Øc nh·ªü theo s·ªë th·ª© t·ª±");
});

// üìå L·ªánh /add [n·ªôi dung] [HH:MM] [ng√†y]
bot.onText(/\/add (.+) (\d{2}:\d{2})? (\d{1,2})?/, (msg, match) => {
    const chatId = msg.chat.id;
    const content = match[1];
    const time = match[2] || "08:00"; // M·∫∑c ƒë·ªãnh 08:00 n·∫øu kh√¥ng nh·∫≠p gi·ªù
    const day = match[3] ? parseInt(match[3]) : new Date().getDate(); // M·∫∑c ƒë·ªãnh l√† h√¥m nay

    const now = new Date();
    const targetDate = new Date(now.getFullYear(), now.getMonth(), day, time.split(':')[0], time.split(':')[1]);

    if (targetDate < now) targetDate.setMonth(targetDate.getMonth() + 1);

    if (!reminders[chatId]) reminders[chatId] = [];
    reminders[chatId].push({ type: "one-time", content, time, day, date: targetDate });

    bot.sendMessage(chatId, `‚úÖ ƒê√£ ƒë·∫∑t nh·∫Øc nh·ªü: *${content}* v√†o l√∫c *${time}* ng√†y *${day}*`, { parse_mode: "Markdown" });

    setTimeout(() => {
        bot.sendMessage(chatId, `üîî Nh·∫Øc nh·ªü: *${content}*`, { parse_mode: "Markdown" });
    }, targetDate - now);
});

// üìå L·ªánh /reply [n·ªôi dung] [ng√†y]
bot.onText(/\/reply (.+) (\d{1,2})/, (msg, match) => {
    const chatId = msg.chat.id;
    const content = match[1];
    const day = parseInt(match[2]);

    const now = new Date();
    const time = "08:00"; // M·∫∑c ƒë·ªãnh 08:00
    let targetDate = new Date(now.getFullYear(), now.getMonth(), day, 8, 0);

    if (targetDate < now) targetDate.setMonth(targetDate.getMonth() + 1);

    if (!reminders[chatId]) reminders[chatId] = [];
    reminders[chatId].push({ type: "monthly", content, time, day });

    bot.sendMessage(chatId, `‚úÖ ƒê√£ ƒë·∫∑t nh·∫Øc nh·ªü h√†ng th√°ng: *${content}* v√†o ng√†y *${day}*`, { parse_mode: "Markdown" });

    setInterval(() => {
        const today = new Date();
        if (today.getDate() === day) {
            bot.sendMessage(chatId, `üîî [H·∫±ng th√°ng] Nh·∫Øc nh·ªü: *${content}*`, { parse_mode: "Markdown" });
        }
    }, 86400000); // Ki·ªÉm tra m·ªói ng√†y (24 gi·ªù)
});

// üìå L·ªánh /all: Hi·ªÉn th·ªã t·∫•t c·∫£ nh·∫Øc nh·ªü
bot.onText(/\/all/, (msg) => {
    const chatId = msg.chat.id;
    if (!reminders[chatId] || reminders[chatId].length === 0) {
        bot.sendMessage(chatId, "üìã Kh√¥ng c√≥ nh·∫Øc nh·ªü n√†o.");
        return;
    }

    let text = "üìã Danh s√°ch nh·∫Øc nh·ªü:\n";
    reminders[chatId].forEach((reminder, index) => {
        text += `${index + 1}. *${reminder.content}* - ${reminder.time} (Ng√†y ${reminder.day})\n`;
    });

    bot.sendMessage(chatId, text, { parse_mode: "Markdown" });
});

// üìå L·ªánh /remove [s·ªë th·ª© t·ª±]
bot.onText(/\/remove (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const index = parseInt(match[1]) - 1;

    if (!reminders[chatId] || !reminders[chatId][index]) {
        bot.sendMessage(chatId, "‚ùå Kh√¥ng t√¨m th·∫•y nh·∫Øc nh·ªü n√†y.");
        return;
    }

    const removed = reminders[chatId].splice(index, 1);
    bot.sendMessage(chatId, `‚úÖ ƒê√£ x√≥a nh·∫Øc nh·ªü: *${removed[0].content}*`, { parse_mode: "Markdown" });
});
